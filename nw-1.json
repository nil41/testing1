{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "testing",

  "Parameters" : {
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VPC",
      "ConstraintDescription" : "Enter VPC Id of an existing Virtual Private Cloud (VPC)."
    },

	"CodeDeployServiceRole": {
       "Type" : "String",
	 "Default" : "arn:aws:iam::088717973805:role/CodeDeploy",
      "AllowedValues" : ["Ec2CodeDeploy", "arn:aws:iam::088717973805:role/CodeDeploy"],
      "Description" : "Name of an existing CodeDeploy IAM role",
      
      "ConstraintDescription" : "must be the name of an existing CodeDeploy IAM role."
    },
	
	
	
	
	
	
    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Select SubnetIds in your VPC",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
	
	
	"IAMec2" : {
	  "Type" : "String",
	 "Default" : "Ec2CodeDeploy",
    "AllowedValues" : ["Ec2CodeDeploy", "CodeDeploy"],
      "Description" : "Name of an existing EC2 IAM role",
      
      "ConstraintDescription" : "must be the name of an existing EC2 IAM role."
    },
	
	
	
	

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
   
      "AWSRegionArch2AMI" : {
	  "us-east-1" : { "AMI" : "ami-a4c7edb2" }
	  
	 }

  },

  
 
  
  "Resources" : {
    
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" }, 
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "2",
        "MaxSize" : "2",
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
      },
      
       "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
     	  
      "Properties" : {
       
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "AMI" ]},
		
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
		"IamInstanceProfile": {
          "Ref": "IAMec2"
        },
		
		 "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",        
               
			 "yum -y update\n",

            "yum install -y ruby\n",

             "yum install -y aws-cli\n",

            "cd /home/ec2-user\n",

              "aws s3 cp s3://aws-codedeploy-us-east-1/latest/install . --region us-east-1\n",

           "chmod +x ./install\n",

             "./install auto\n",
					
				
                "'\n"
              ]
            ]
          }
        }
		
		
		
		
		
		
      }
    },
	
	

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : { "Ref" : "Subnets"},
		"SecurityGroups": [{"Ref": "InstanceSecurityGroup"}]
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },

    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"}
      }
    },

	
	
	
    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" :"0.0.0.0/0"
        },{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
           "CidrIp" :"0.0.0.0/0"
        } ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    },
	
	
	 "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
	
	
	
	   "InstanceRole" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" : {
          "Version" : "2008-10-17",
          "Statement" : [ {
            "Sid" : "1",
            "Effect" : "Allow",
            "Principal" : {
              "Service" : "codedeploy.amazonaws.com"
            },
            "Action" : "sts:AssumeRole"
          } ]
        },
        "Path" : "/"
      }
    },
	
	
	 "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      }
    },
	
	
	 "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "s3:Get*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
	
	
	
	
	
	
	
	
	
	
	
	  "DemoApplication" : {
      "Type" : "AWS::CodeDeploy::Application",
	   "Properties" : {
               "ApplicationName" : "jenkinsAN"
                   }
    },
	
	
	"DemoFleet" : {
      "Type" : "AWS::CodeDeploy::DeploymentGroup",
      "Properties" : {
	  
        "ApplicationName" : {
          "Ref" : "DemoApplication"
        },
		
		"AutoScalingGroups" : [ {"Ref" : "WebServerGroup"} ] ,
		
		 "DeploymentGroupName" : "jenkinsDGN",
		
         "ServiceRoleArn": {
          "Ref": "CodeDeployServiceRole"
          
        }
		
  	  }
	},
	
	
	   "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    }
	
	
	
	
	
	
	
	
	
  },
  
  

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]}]]}
    },
	
	
	 "CodeDeployApplicationName" : {
      "Description" : "CodeDeploy Application Name",
      "Value" : {
        "Ref" : "DemoApplication"
      }
    },
	
	 "CodeDeployTrustRoleARN": {
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustRole",
          "Arn"
        ]
      }
    },
	
	
	
    "CodeDeployDeploymentGroup" : {
      "Description" : "CodeDeploy Deployment Group Name",
      "Value" : {
        "Ref" : "DemoFleet"
      }
    }
	
	
	
  }
}